//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WordCountServiceClient.WordCountServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WordCountServiceReference.IWordCount")]
    public interface IWordCount {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordCount/ProcessUserInput", ReplyAction="http://tempuri.org/IWordCount/ProcessUserInputResponse")]
        void ProcessUserInput(string value);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWordCount/ProcessUserInput", ReplyAction="http://tempuri.org/IWordCount/ProcessUserInputResponse")]
        System.IAsyncResult BeginProcessUserInput(string value, System.AsyncCallback callback, object asyncState);
        
        void EndProcessUserInput(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordCount/GetRunningWordCount", ReplyAction="http://tempuri.org/IWordCount/GetRunningWordCountResponse")]
        string GetRunningWordCount(string value);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWordCount/GetRunningWordCount", ReplyAction="http://tempuri.org/IWordCount/GetRunningWordCountResponse")]
        System.IAsyncResult BeginGetRunningWordCount(string value, System.AsyncCallback callback, object asyncState);
        
        string EndGetRunningWordCount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordCount/GetWordCount", ReplyAction="http://tempuri.org/IWordCount/GetWordCountResponse")]
        string GetWordCount(string value);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWordCount/GetWordCount", ReplyAction="http://tempuri.org/IWordCount/GetWordCountResponse")]
        System.IAsyncResult BeginGetWordCount(string value, System.AsyncCallback callback, object asyncState);
        
        string EndGetWordCount(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWordCountChannel : WordCountServiceClient.WordCountServiceReference.IWordCount, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRunningWordCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRunningWordCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetWordCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetWordCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WordCountClient : System.ServiceModel.ClientBase<WordCountServiceClient.WordCountServiceReference.IWordCount>, WordCountServiceClient.WordCountServiceReference.IWordCount {
        
        private BeginOperationDelegate onBeginProcessUserInputDelegate;
        
        private EndOperationDelegate onEndProcessUserInputDelegate;
        
        private System.Threading.SendOrPostCallback onProcessUserInputCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRunningWordCountDelegate;
        
        private EndOperationDelegate onEndGetRunningWordCountDelegate;
        
        private System.Threading.SendOrPostCallback onGetRunningWordCountCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetWordCountDelegate;
        
        private EndOperationDelegate onEndGetWordCountDelegate;
        
        private System.Threading.SendOrPostCallback onGetWordCountCompletedDelegate;
        
        public WordCountClient() {
        }
        
        public WordCountClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WordCountClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WordCountClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WordCountClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ProcessUserInputCompleted;
        
        public event System.EventHandler<GetRunningWordCountCompletedEventArgs> GetRunningWordCountCompleted;
        
        public event System.EventHandler<GetWordCountCompletedEventArgs> GetWordCountCompleted;
        
        public void ProcessUserInput(string value) {
            base.Channel.ProcessUserInput(value);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginProcessUserInput(string value, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginProcessUserInput(value, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndProcessUserInput(System.IAsyncResult result) {
            base.Channel.EndProcessUserInput(result);
        }
        
        private System.IAsyncResult OnBeginProcessUserInput(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string value = ((string)(inValues[0]));
            return this.BeginProcessUserInput(value, callback, asyncState);
        }
        
        private object[] OnEndProcessUserInput(System.IAsyncResult result) {
            this.EndProcessUserInput(result);
            return null;
        }
        
        private void OnProcessUserInputCompleted(object state) {
            if ((this.ProcessUserInputCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ProcessUserInputCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ProcessUserInputAsync(string value) {
            this.ProcessUserInputAsync(value, null);
        }
        
        public void ProcessUserInputAsync(string value, object userState) {
            if ((this.onBeginProcessUserInputDelegate == null)) {
                this.onBeginProcessUserInputDelegate = new BeginOperationDelegate(this.OnBeginProcessUserInput);
            }
            if ((this.onEndProcessUserInputDelegate == null)) {
                this.onEndProcessUserInputDelegate = new EndOperationDelegate(this.OnEndProcessUserInput);
            }
            if ((this.onProcessUserInputCompletedDelegate == null)) {
                this.onProcessUserInputCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnProcessUserInputCompleted);
            }
            base.InvokeAsync(this.onBeginProcessUserInputDelegate, new object[] {
                        value}, this.onEndProcessUserInputDelegate, this.onProcessUserInputCompletedDelegate, userState);
        }
        
        public string GetRunningWordCount(string value) {
            return base.Channel.GetRunningWordCount(value);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetRunningWordCount(string value, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRunningWordCount(value, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetRunningWordCount(System.IAsyncResult result) {
            return base.Channel.EndGetRunningWordCount(result);
        }
        
        private System.IAsyncResult OnBeginGetRunningWordCount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string value = ((string)(inValues[0]));
            return this.BeginGetRunningWordCount(value, callback, asyncState);
        }
        
        private object[] OnEndGetRunningWordCount(System.IAsyncResult result) {
            string retVal = this.EndGetRunningWordCount(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRunningWordCountCompleted(object state) {
            if ((this.GetRunningWordCountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRunningWordCountCompleted(this, new GetRunningWordCountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRunningWordCountAsync(string value) {
            this.GetRunningWordCountAsync(value, null);
        }
        
        public void GetRunningWordCountAsync(string value, object userState) {
            if ((this.onBeginGetRunningWordCountDelegate == null)) {
                this.onBeginGetRunningWordCountDelegate = new BeginOperationDelegate(this.OnBeginGetRunningWordCount);
            }
            if ((this.onEndGetRunningWordCountDelegate == null)) {
                this.onEndGetRunningWordCountDelegate = new EndOperationDelegate(this.OnEndGetRunningWordCount);
            }
            if ((this.onGetRunningWordCountCompletedDelegate == null)) {
                this.onGetRunningWordCountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRunningWordCountCompleted);
            }
            base.InvokeAsync(this.onBeginGetRunningWordCountDelegate, new object[] {
                        value}, this.onEndGetRunningWordCountDelegate, this.onGetRunningWordCountCompletedDelegate, userState);
        }
        
        public string GetWordCount(string value) {
            return base.Channel.GetWordCount(value);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetWordCount(string value, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetWordCount(value, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetWordCount(System.IAsyncResult result) {
            return base.Channel.EndGetWordCount(result);
        }
        
        private System.IAsyncResult OnBeginGetWordCount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string value = ((string)(inValues[0]));
            return this.BeginGetWordCount(value, callback, asyncState);
        }
        
        private object[] OnEndGetWordCount(System.IAsyncResult result) {
            string retVal = this.EndGetWordCount(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetWordCountCompleted(object state) {
            if ((this.GetWordCountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetWordCountCompleted(this, new GetWordCountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetWordCountAsync(string value) {
            this.GetWordCountAsync(value, null);
        }
        
        public void GetWordCountAsync(string value, object userState) {
            if ((this.onBeginGetWordCountDelegate == null)) {
                this.onBeginGetWordCountDelegate = new BeginOperationDelegate(this.OnBeginGetWordCount);
            }
            if ((this.onEndGetWordCountDelegate == null)) {
                this.onEndGetWordCountDelegate = new EndOperationDelegate(this.OnEndGetWordCount);
            }
            if ((this.onGetWordCountCompletedDelegate == null)) {
                this.onGetWordCountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetWordCountCompleted);
            }
            base.InvokeAsync(this.onBeginGetWordCountDelegate, new object[] {
                        value}, this.onEndGetWordCountDelegate, this.onGetWordCountCompletedDelegate, userState);
        }
    }
}
